/*!

\version @VERSION@
\author Eddie Carle
\date @BUILD_TIME@
\mainpage

\ref intro \n
\ref features \n
\ref overview \n
\ref dep \n
\ref installation \n
\ref tutorials

\section intro Introduction

The fastcgi++ library started out as a C++ alternative to the official FastCGI developers kit. Although the official developers kit provided some degree of C++ interface, it was very limited. The goal of this project was to provide a framework that offered all the facilities that the C++ language has to offer. Over time the scope broadened to the point that it became more than just a simple protocol library, but a platform to develop web application under C++. To the dismay of many, this library has zero support for the old CGI protocol. The consensus was that if one were to be developing web applications under C++, efficient memory management and CPU usage would be a top priority, not CGI compatibility. Effective management of simultaneous requests without the need for multiple threads is something that fastcgi++ does best. Environment data is organized into meaningful data types as opposed to a series of text strings. Internationalization and Unicode support is another top priority. The library is templated to allow internal wide character use for efficient text processing while code converting down to utf-8 upon transmission to the client.

\section features Features

	\li Support for multiple locales and characters sets including wide Unicode and utf-8
	\li Internally manages simultaneous requests instead of leaving that to the user
	\li Establishes environment data into usable data structures
	\li Implements a task manager that can not only easily communicate outside the library, but with separate threads
	\li Provides a familiar io interface by implementing it through STL iostreams
	\li Complete compliance with FastCGI protocol version 1

\section overview Overview

The fastcgi++ library is built around three classes. Fastcgipp::Manager handles all task and request management along with the communication inside and outside the library. Fastcgipp::Transceiver handles all low level socket io and maintains send/receive buffers. Fastcgipp::Request is designed to handle the individual requests themselves. The aspects of the FastCGI protocol itself are defined in the Fastcgipp::Protocol namespace.

The Fastcgipp::Request class is a pure virtual class. The class, as is, establishes and parses environment().data. Once complete it looks to user defined virtual functions for actually generating the response. A response shall be outputted by the user defined virtuals through an output stream. Once a request has control over operation it maintains it until relinquishing it. Should the user know a request will sit around waiting for data, it can return control to Fastcgipp::Manager and have a message sent back through the manager when the data is ready. The aspects of the environment().are build around the Fastcgipp::Http namespace.

Fastcgipp::Manager basically runs an endless loop (which can be terminated through POSIX signals or a function call from another thread) that passes control to requests that have a message queued or the transceiver. It is smart enough to go into a sleep mode when there are no tasks to complete or data to receive.

Fastcgipp::Transceiver's transmit half implements a cyclic buffer that can grow indefinitely to insure that operation does not halt. The send half receives full frames and passes them through Fastcgipp::Manager onto the requests. It manages all the open connections and polls them for incoming data.

\section dep Dependencies

	\li Boost C++ Libraries >1.35.0
	\li Posix compliant OS (socket stuff)

\section installation Installation

fastcgi++ installs just the same as any library out there the uses the GNU build system...

<tt>tar -xvjf fastcgi++-$(VERSION).tar.bz2\n
cd fastcgi++-$(VERSION)\n
./configure\n
make\n
make install</tt>

If you want to build the examples do...

<tt>cd examples\n
make examples</tt>

A pkg-config file will be installed so you can compile against the libraries with

<tt>g++ -o script.fcgi script.cpp `pkg-config --libs --cflags fastcgi++`</tt>

\section tutorials Examples

This is a collection of tutorials that should cover most aspects of the
fastcgi++ library

\subpage helloWorld : A simple example outputting "Hello World" in five
languages using wide characters internally and UTF-8 externally.

*/
